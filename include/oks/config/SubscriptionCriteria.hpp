  /**
   *  \file SubscriptionCriteria.h This file contains ConfigurationSubscriptionCriteria class,
   *  that is used to define subscription criteria on database changes.
   *  \author Igor Soloviev
   *  \brief subscription criteria on database changes
   */

#ifndef CONFIG_SUBSCRIPTION__CRITERIA_H_
#define CONFIG_SUBSCRIPTION__CRITERIA_H_

#include <set>
#include <map>
#include <string>
#include <iostream>

class DalObject;

  /**
   * \brief Describes a subscription criteria.
   *
   *  The class provides interfaces to describe a subscription criteria on
   *  configuration modifications. A user creates an object of given class and
   *  describes criteria using add(const std::string&, const std::string&) and
   *  add(const std::string&) methods.
   *
   *  When the subscription criteria is ready, it is necessary to use
   *  Configuration::subscribe() method providing subscription criteria
   *  and callback. When database information is modified and it matches
   *  the criteria, the user's callback with such changes will be invoked.
   */

class ConfigurationSubscriptionCriteria {

  public:

      /**
       *  \brief Add subscribtion on class changes.
       *
       *  The notification mechanism is started by the Configuration::subscribe()
       *  method. The user callback function passed to this method will be invoked
       *  in case of any modification of an object of this class or objects
       *  of derived classes.
       *
       *  \param class_name name of the class
       */

    void add(const std::string& class_name);


      /**
       *  \brief Add subscribtion on object changes by class name and object id.
       *
       *  Subscribe on changes of object by class name and object identity.
       *
       *  \param class_name  name of the class
       *  \param object_id   object identity
       */

    void add(const std::string& class_name, const std::string& object_id);


      /**
       *  \brief Add subscribtion on object changes by object's reference.
       *
       *  Subscribe on changes of object by object's reference.
       *  To be used for an object of class generated by genconfig.
       *
       *  \param object  reference to object
       */

    void add(const ::DalObject& object);


      /**
       *  \brief Remove subscribtion on class changes.
       *
       *  Removes subscription on class changes previously made with
       *  add(const std::string&) method.
       *
       *  \param class_name name of the class
       */

    void remove(const std::string& class_name);


      /**
       *  \brief Remove subscribtion on object changes by class name and object id.
       *
       *  Removes subscription on object changes previously made with
       *  add(const std::string&, const std::string&) or add(const ::DalObject&) methods.
       *
       *  \param class_name  name of the class
       *  \param object_id   object identity
       */

    void remove(const std::string& class_name, const std::string& object_id);


      /**
       *  \brief Remove subscribtion on object changes by reference.
       *
       *  Removes subscription on object changes previously made with
       *  add(const std::string&, const std::string&) or add(const ::DalObject&) methods.
       *  To be used for an object of class generated by genconfig.
       *
       *  \param object  reference to object
       */

    void remove(const ::DalObject& object);


  public:

      /// The map stores full subsription information

    typedef std::map< std::string , std::set<std::string> > ObjectMap;


  public:

      /**
       *  Return list of names of classes with subsriptions on any changes.
       */

    const std::set<std::string> & get_classes_subscription() const { return m_classes_subscription; }


      /**
       *  Return list of objects subsribed on notification in case of changes.
       */

    const ObjectMap & get_objects_subscription() const { return m_objects_subscription; }


  private:

    std::set<std::string> m_classes_subscription;
    ObjectMap m_objects_subscription;

};

  /** Operator to print details of subscription criteria object **/

std::ostream& operator<<(std::ostream&, const ::ConfigurationSubscriptionCriteria&);

#endif
